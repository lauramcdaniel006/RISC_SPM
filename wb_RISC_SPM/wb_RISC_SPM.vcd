$date
	Sun May  8 22:51:54 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module wb_RISC_SPM $end
$var wire 1 ! clk $end
$var wire 32 " i_wb_addr [31:0] $end
$var wire 1 # i_wb_cyc $end
$var wire 32 $ i_wb_data [31:0] $end
$var wire 1 % i_wb_stb $end
$var wire 1 & i_wb_we $end
$var wire 8 ' memory_bus [7:0] $end
$var wire 1 ( o_wb_stall $end
$var wire 1 ) rst $end
$var wire 8 * instruction_bus [7:0] $end
$var reg 8 + address_bus [7:0] $end
$var reg 8 , data_bus [7:0] $end
$var reg 1 - o_wb_ack $end
$var reg 32 . o_wb_data [31:0] $end
$scope module RISC_SPM_0 $end
$var wire 8 / Bus_1 [7:0] $end
$var wire 8 0 address [7:0] $end
$var wire 8 1 address_bus [7:0] $end
$var wire 1 ! clk $end
$var wire 8 2 data_bus [7:0] $end
$var wire 8 3 instruction_bus [7:0] $end
$var wire 8 4 mem_word [7:0] $end
$var wire 8 5 memory_bus [7:0] $end
$var wire 1 ) rst $end
$var wire 1 6 write $end
$var wire 1 & write_in $end
$var wire 1 7 zero $end
$var wire 8 8 instruction [7:0] $end
$var wire 2 9 Sel_Bus_2_Mux [1:0] $end
$var wire 3 : Sel_Bus_1_Mux [2:0] $end
$var wire 1 ; Load_Reg_Z $end
$var wire 1 < Load_Reg_Y $end
$var wire 1 = Load_R3 $end
$var wire 1 > Load_R2 $end
$var wire 1 ? Load_R1 $end
$var wire 1 @ Load_R0 $end
$var wire 1 A Load_PC $end
$var wire 1 B Load_IR $end
$var wire 1 C Load_Add_R $end
$var wire 1 D Inc_PC $end
$scope module M0_Processor $end
$var wire 8 E Bus_1 [7:0] $end
$var wire 8 F address [7:0] $end
$var wire 1 ! clk $end
$var wire 8 G mem_word [7:0] $end
$var wire 1 ) rst $end
$var wire 4 H opcode [3:0] $end
$var wire 8 I instruction [7:0] $end
$var wire 1 J alu_zero_flag $end
$var wire 8 K alu_out [7:0] $end
$var wire 1 7 Zflag $end
$var wire 8 L Y_value [7:0] $end
$var wire 2 M Sel_Bus_2_Mux [1:0] $end
$var wire 3 N Sel_Bus_1_Mux [2:0] $end
$var wire 8 O R3_out [7:0] $end
$var wire 8 P R2_out [7:0] $end
$var wire 8 Q R1_out [7:0] $end
$var wire 8 R R0_out [7:0] $end
$var wire 8 S PC_count [7:0] $end
$var wire 1 ; Load_Reg_Z $end
$var wire 1 < Load_Reg_Y $end
$var wire 1 = Load_R3 $end
$var wire 1 > Load_R2 $end
$var wire 1 ? Load_R1 $end
$var wire 1 @ Load_R0 $end
$var wire 1 A Load_PC $end
$var wire 1 B Load_IR $end
$var wire 1 C Load_Add_R $end
$var wire 1 D Inc_PC $end
$var wire 8 T Bus_2 [7:0] $end
$scope module ALU $end
$var wire 8 U data_2 [7:0] $end
$var wire 4 V sel [3:0] $end
$var wire 8 W data_1 [7:0] $end
$var wire 1 J alu_zero_flag $end
$var reg 8 X alu_out [7:0] $end
$upscope $end
$scope module Add_R $end
$var wire 1 ! clk $end
$var wire 1 ) rst $end
$var wire 1 C load $end
$var wire 8 Y data_in [7:0] $end
$var reg 8 Z data_out [7:0] $end
$upscope $end
$scope module IR $end
$var wire 1 ! clk $end
$var wire 1 ) rst $end
$var wire 1 B load $end
$var wire 8 [ data_in [7:0] $end
$var reg 8 \ data_out [7:0] $end
$upscope $end
$scope module Mux_1 $end
$var wire 8 ] mux_out [7:0] $end
$var wire 3 ^ sel [2:0] $end
$var wire 8 _ data_e [7:0] $end
$var wire 8 ` data_d [7:0] $end
$var wire 8 a data_c [7:0] $end
$var wire 8 b data_b [7:0] $end
$var wire 8 c data_a [7:0] $end
$upscope $end
$scope module Mux_2 $end
$var wire 8 d data_a [7:0] $end
$var wire 8 e data_b [7:0] $end
$var wire 8 f data_c [7:0] $end
$var wire 2 g sel [1:0] $end
$var wire 8 h mux_out [7:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 8 i data_in [7:0] $end
$var wire 1 ) rst $end
$var wire 1 A Load_PC $end
$var wire 1 D Inc_PC $end
$var reg 8 j count [7:0] $end
$upscope $end
$scope module R0 $end
$var wire 1 ! clk $end
$var wire 8 k data_in [7:0] $end
$var wire 1 ) rst $end
$var wire 1 @ load $end
$var reg 8 l data_out [7:0] $end
$upscope $end
$scope module R1 $end
$var wire 1 ! clk $end
$var wire 8 m data_in [7:0] $end
$var wire 1 ) rst $end
$var wire 1 ? load $end
$var reg 8 n data_out [7:0] $end
$upscope $end
$scope module R2 $end
$var wire 1 ! clk $end
$var wire 8 o data_in [7:0] $end
$var wire 1 ) rst $end
$var wire 1 > load $end
$var reg 8 p data_out [7:0] $end
$upscope $end
$scope module R3 $end
$var wire 1 ! clk $end
$var wire 8 q data_in [7:0] $end
$var wire 1 ) rst $end
$var wire 1 = load $end
$var reg 8 r data_out [7:0] $end
$upscope $end
$scope module Reg_Y $end
$var wire 1 ! clk $end
$var wire 8 s data_in [7:0] $end
$var wire 1 ) rst $end
$var wire 1 < load $end
$var reg 8 t data_out [7:0] $end
$upscope $end
$scope module Reg_Z $end
$var wire 1 ! clk $end
$var wire 1 J data_in $end
$var wire 1 ) rst $end
$var wire 1 ; load $end
$var reg 1 7 data_out $end
$upscope $end
$upscope $end
$scope module M1_Controller $end
$var wire 1 ! clk $end
$var wire 8 u instruction [7:0] $end
$var wire 1 ) rst $end
$var wire 1 7 zero $end
$var wire 2 v src [1:0] $end
$var wire 4 w opcode [3:0] $end
$var wire 2 x dest [1:0] $end
$var wire 2 y Sel_Bus_2_Mux [1:0] $end
$var wire 3 z Sel_Bus_1_Mux [2:0] $end
$var reg 1 D Inc_PC $end
$var reg 1 C Load_Add_R $end
$var reg 1 B Load_IR $end
$var reg 1 A Load_PC $end
$var reg 1 @ Load_R0 $end
$var reg 1 ? Load_R1 $end
$var reg 1 > Load_R2 $end
$var reg 1 = Load_R3 $end
$var reg 1 < Load_Reg_Y $end
$var reg 1 ; Load_Reg_Z $end
$var reg 1 { Sel_ALU $end
$var reg 1 | Sel_Bus_1 $end
$var reg 1 } Sel_Mem $end
$var reg 1 ~ Sel_PC $end
$var reg 1 !" Sel_R0 $end
$var reg 1 "" Sel_R1 $end
$var reg 1 #" Sel_R2 $end
$var reg 1 $" Sel_R3 $end
$var reg 1 %" err_flag $end
$var reg 4 &" next_state [3:0] $end
$var reg 4 '" state [3:0] $end
$var reg 1 (" write $end
$scope begin Output_and_next_state $end
$upscope $end
$scope begin State_transistions $end
$upscope $end
$upscope $end
$scope module M2_MEM $end
$var wire 8 )" address [7:0] $end
$var wire 1 ! clk $end
$var wire 8 *" data_in [7:0] $end
$var wire 8 +" data_out [7:0] $end
$var wire 1 6 write $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx +"
bx *"
bx )"
0("
b0 '"
b1 &"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
bx z
bx y
b0 x
b0 w
b0 v
b0 u
b0 t
bx s
b0 r
bx q
b0 p
bx o
b0 n
bx m
b0 l
bx k
b0 j
bx i
bx h
bx g
bx f
bx e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
bx ^
bx ]
b0 \
bx [
b0 Z
bx Y
b0 X
b0 W
b0 V
bx U
bx T
b0 S
b0 R
b0 Q
b0 P
b0 O
bx N
bx M
b0 L
b0 K
1J
b0 I
b0 H
bx G
bx F
bx E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
bx :
bx 9
b0 8
07
06
bz 5
bx 4
b0 3
bx 2
bx 1
bx 0
bx /
bx .
0-
bx ,
bx +
b0 *
0)
0(
bz '
0&
0%
b0 $
0#
b0 "
1!
$end
#5000
0!
#10000
1!
#15000
0!
#20000
1!
#25000
0!
#30000
1!
#35000
0!
#40000
1!
#45000
0!
#50000
1!
#55000
0!
#60000
1!
#65000
0!
#70000
1!
#75000
0!
#80000
1!
#85000
0!
#90000
1!
#95000
0!
#100000
1#
1%
b110000000000000000000000000000 "
b1111111111111111 $
x6
1&
1!
#105000
0!
#110000
1-
b11111111 ,
b11111111 2
b11111111 +
b11111111 1
1!
#115000
0!
#120000
0%
06
0&
0#
1!
#125000
0!
#130000
0-
1!
#135000
0!
#140000
1#
1%
b0 $
1!
#145000
0!
#150000
1-
b1111111111111111 .
1!
#155000
0!
#160000
0%
0#
1!
#165000
0!
#170000
0-
1!
#175000
0!
#180000
1!
#185000
0!
#190000
1!
#195000
0!
#200000
1!
#205000
0!
#210000
1!
#215000
0!
#220000
1!
#225000
0!
#230000
1!
#235000
0!
#240000
1!
#245000
0!
#250000
1!
#255000
0!
#260000
1!
#265000
0!
#270000
1!
#275000
0!
#280000
1#
1%
b110000000000000000000000000100 "
1!
#285000
0!
#290000
1-
b0zzzzzzzz .
1!
#295000
0!
#300000
0%
0#
1!
#305000
0!
#310000
b10000001 ,
b10000001 2
b0x 0
b0x F
b0x )"
b1 +
b1 1
0-
1!
#315000
0!
#320000
1#
1%
1!
#325000
0!
#330000
1-
1!
#335000
0!
#340000
0%
0#
1!
#345000
0!
#350000
0-
1!
#355000
0!
#360000
1#
1%
1!
#365000
0!
#370000
1-
1!
#375000
0!
#380000
0%
0#
1!
#385000
0!
#390000
bz *
bz 3
0-
1!
#395000
0!
#400000
1!
#405000
0!
#410000
1!
#415000
0!
#420000
1!
#425000
0!
#430000
1!
#435000
0!
#440000
1!
#445000
0!
#450000
1!
#455000
0!
#460000
1!
#465000
0!
#470000
1!
#475000
0!
#480000
1!
#485000
0!
#490000
1!
#490001
